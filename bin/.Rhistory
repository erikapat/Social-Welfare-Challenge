mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
mx[mx <40000]/length(mx)
length(mx[mx <40000])/length(mx)
60000/800000
max(mx)
# SMILATION 1
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 300000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
length(mx[mx <40000])/length(mx)
max(mx)
mean_1 = 800000
std_1 = 100000
mean_2 = 780000
std_2 = 300000
n = 50
SE.1 <-  std_1 / sqrt(50)
SE.2 <-  std_2 / sqrt(50)
SE      <- sqrt( std_2^2 + SE.2^2)
z       <- (mean_1 - mean_2) / SE
P.z     <- pnorm(z, lower.tail = TRUE)
P.z
z
P.z
mean_1 = 800000
std_1 = 10000
mean_2 = 780000
std_2 = 30000
n = 50
SE.1 <-  std_1 / sqrt(50)
SE.2 <-  std_2 / sqrt(50)
SE      <- sqrt( std_2^2 + SE.2^2)
z       <- (mean_1 - mean_2) / SE
P.z     <- pnorm(z, lower.tail = TRUE)
P.z
z
P.z
mean_1 = 8000000
std_1 = 100000
mean_2 = 780000
std_2 = 30000
n = 50
SE.1 <-  std_1 / sqrt(50)
SE.2 <-  std_2 / sqrt(50)
SE      <- sqrt( std_2^2 + SE.2^2)
z       <- (mean_1 - mean_2) / SE
P.z     <- pnorm(z, lower.tail = TRUE)
P.z
z
P.z
mean_1 = 800000
std_1 = 100000
mean_2 = 780000
std_2 = 30000
n = 50
SE.1 <-  std_1 / sqrt(50)
SE.2 <-  std_2 / sqrt(50)
SE      <- sqrt( std_2^2 + SE.2^2)
z       <- (mean_1 - mean_2) / SE
P.z     <- pnorm(z, lower.tail = TRUE)
P.z
z
P.z
# SMILATION 1
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
length(mx[mx <40000])/length(mx)
max(mx)
60000/800000
##
N = 5000
mx = NULL
for (i in 1:N){
mean = 800000
std = 100000
shape = (mean/std)^2
scale = (std^2)/mean
df.1 = rgamma(50, shape, rate = 1/scale)
mean = 780000
std = 30000
shape = (mean/std)^2
scale = (std^2)/mean
df.2 = rgamma(50, shape, rate = 1/scale)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
N = 50
mx = NULL
for (i in 1:N){
mean = 800000
std = 100000
shape = (mean/std)^2
scale = (std^2)/mean
df.1 = rgamma(50, shape, rate = 1/scale)
mean = 780000
std = 30000
shape = (mean/std)^2
scale = (std^2)/mean
df.2 = rgamma(50, shape, rate = 1/scale)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
mx
N = 50
mx = NULL
for (i in 1:N){
mean = 800000
std = 100000
shape = (mean/std)^2
scale = (std^2)/mean
df.1 = rgamma(50, shape, rate = 1/scale)
mean = 780000
std = 30000
shape = (mean/std)^2
scale = (std^2)/mean
df.2 = rgamma(50, shape, rate = 1/scale)
xx1 = df.1 #(x1 -mean(x1))/sd(x1)
xx2 = df.2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
length(mx[mx <40000])/length(mx)
max(mx)
N = 5000
mx = NULL
for (i in 1:N){
mean = 800000
std = 100000
shape = (mean/std)^2
scale = (std^2)/mean
df.1 = rgamma(50, shape, rate = 1/scale)
mean = 780000
std = 30000
shape = (mean/std)^2
scale = (std^2)/mean
df.2 = rgamma(50, shape, rate = 1/scale)
xx1 = df.1 #(x1 -mean(x1))/sd(x1)
xx2 = df.2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
length(mx[mx <40000])/length(mx)
max(mx)
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
mx = c(mx, sum(xx1) - sum(xx2))
}
hist(mx)
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
mx = c(mx, sum(x1) - sum(x2))
}
hist(mx)
max(mx)
4190152/50
# SMILATION 1
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
length(mx[mx <40000])/length(mx)
max(mx)
73243*50
z
(mean_1 - mean_2)
library(ggplot2)
b <- 0.8 # power
a <- 0.05 # significance level
es <- seq(from = 0.1, to = 0.3, by = 0.001) # effect sizes
result <- data.frame(matrix(nrow = length(es), ncol = 2))
names(result) <- c("ES", "ni")
for (i in 1:length(es)){
result[i, "ES"] <- es[i]
result[i, "ni"] <- power.t.test(sig.level = a, d = es[i], sd = 1,
alternative = 'two.sided', power = b)$n
}
ggplot(data = result, aes(x = ES, y = ni)) + geom_line() + xlab("Effect Size") + ylab("N") +
scale_x_continuous(labels = scales::comma)
ggplot(data = result, aes(x = ES, y = ni)) + geom_line() + xlab("Effect Size") + ylab("N") #+
?pnorm
SE
SE.1 <-  std_1 / sqrt(50)
SE.2 <-  std_2 / sqrt(50)
SE      <- sqrt( std_2^2 + SE.2^2)
SE
set.seed(7)
#create samples
sample.1 <- rnorm(8, 100, 3)
sample.2 <- rnorm(10, 103, 7)
#we need a pooled data set for estimating parameters in the prior.
pooled <- c(sample.1, sample.2)
par(mfrow=c(1, 2))
hist(sample.1)
hist(sample.2)
likelihood <- function(parameters){
mu1=parameters[1]; sig1=parameters[2]; mu2=parameters[3]; sig2=parameters[4]
prod(dnorm(sample.1, mu1, sig1)) * prod(dnorm(sample.2, mu2, sig2))
}
prior <- function(parameters){
mu1=parameters[1]; sig1=parameters[2]; mu2=parameters[3]; sig2=parameters[4]
dnorm(mu1, mean(pooled), 1000*sd(pooled)) * dnorm(mu2, mean(pooled), 1000*sd(pooled)) * dexp(sig1, rate=0.1) * dexp(sig2, 0.1)
}
posterior <- function(parameters) {likelihood(parameters) * prior(parameters)}
#starting values
mu1 = 100; sig1 = 10; mu2 = 100; sig2 = 10
parameters <- c(mu1, sig1, mu2, sig2)
#this is the MCMC /w Metropolis method
n.iter <- 10000
results <- matrix(0, nrow=n.iter, ncol=4)
results[1, ] <- parameters
for (iteration in 2:n.iter){
candidate <- parameters + rnorm(4, sd=0.5)
ratio <- posterior(candidate)/posterior(parameters)
if (runif(1) < ratio) parameters <- candidate #Metropolis modification
results[iteration, ] <- parameters
}
#burn-in
results <- results[500:n.iter,]
mu1 <- results[,1]
mu2 <- results[,3]
hist(mu1 - mu2)
mean(mu1 - mu2 < 0)
mu1 - mu2
x <- c(rep(1, length(sample.1)), rep(2, length(sample.2)))
cpd.model <- jags.model(textConnection(model.str),
data=list(y=pooled,
x=x,
mu_pooled=mean(pooled),
tau_pooled=1/(1000 * sd(pooled))^2,
sigma_low=sd(pooled) / 1000,
sigma_high=sd(pooled) * 1000,
Ntotal=length(pooled)))
update(cpd.model, 1000)
chain <- coda.samples(model = cpd.model, n.iter = 100000,
variable.names = c('mu', 'sigma'))
rchain <- as.matrix(chain)
hist(rchain[, 'mu[1]'] - rchain[, 'mu[2]'])
mean(rchain[, 'mu[1]'] - rchain[, 'mu[2]'] < 0)
mean(rchain[, 'mu[2]'] - rchain[, 'mu[1]'] > 5)
??jags.model
####--------------------------------------------------------------------------------------------------------
require(rjags)
model.str <- 'model {
for (i in 1:Ntotal) {
y[i] ~ dt(mu[x[i]], tau[x[i]], nu)
}
for (j in 1:2) {
mu[j] ~ dnorm(mu_pooled, tau_pooled)
tau[j] <- 1 / pow(sigma[j], 2)
sigma[j] ~ dunif(sigma_low, sigma_high)
}
nu <- nu_minus_one + 1
nu_minus_one ~ dexp(1 / 29)
}'
# Indicator variable
x <- c(rep(1, length(sample.1)), rep(2, length(sample.2)))
cpd.model <- jags.model(textConnection(model.str),
data=list(y=pooled,
x=x,
mu_pooled=mean(pooled),
tau_pooled=1/(1000 * sd(pooled))^2,
sigma_low=sd(pooled) / 1000,
sigma_high=sd(pooled) * 1000,
Ntotal=length(pooled)))
update(cpd.model, 1000)
chain <- coda.samples(model = cpd.model, n.iter = 100000,
variable.names = c('mu', 'sigma'))
rchain <- as.matrix(chain)
hist(rchain[, 'mu[1]'] - rchain[, 'mu[2]'])
mean(rchain[, 'mu[1]'] - rchain[, 'mu[2]'] < 0)
mean(rchain[, 'mu[2]'] - rchain[, 'mu[1]'] > 5)
?as.data.table()
?as.data.frame()
?row.names
?order
mean_1 = 800000
std_1 = 100000
mean_2 = 780000
std_2 = 30000
n = 50
SE.1 <-  std_1 / sqrt(50)
SE.2 <-  std_2 / sqrt(50)
SE      <- sqrt( std_2^2 + SE.2^2)
z       <- (mean_1 - mean_2) / SE
P.z     <- pnorm(z, lower.tail = TRUE)
P.z
z
P.z
require(dplyr)
require(ggplot2)
require(
tidyquant)
# densities
df.1 = as.data.frame(rnorm(50, mean = 800000, sd = 100000))
df.1 = df.1  %>%  mutate(variable = 'Downtown Store')
names(df.1) <- c('value', 'variable')
df.2 = as.data.frame(rnorm(50, mean = 780000, sd = 30000))
df.2 = df.2  %>%  mutate(variable = 'Suburban store')
names(df.2) <- c('value', 'variable')
df <- rbind(df.1, df.2)
densi_gg <- ggplot(df, aes(x = value, fill = variable)) +
geom_density(alpha = .7)  #+ #alpha used for filling the density
densi_gg <- densi_gg +  theme_tq()
densi_gg <- densi_gg + theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 12), axis.title.x = element_text(color="black", size= 12, face="bold"))
densi_gg <- densi_gg + theme(axis.text.y = element_text(hjust = 1, size = 12), axis.title.y = element_text(color="black", size= 12, face="bold"))
densi_gg <- densi_gg + theme(legend.title = element_text(colour="blue", size=10,
face="bold"))
densi_gg <- densi_gg +   guides(col = guide_legend(ncol = 1))
densi_gg <- densi_gg + theme(legend.title=element_blank())
densi_gg <- densi_gg + scale_x_continuous(labels = scales::comma)
densi_gg
ggsave('density.png')
getwd()
# SMILATION 1
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
length(mx[mx <40000])/length(mx)
max(mx)
60000/800000
SE
mx
mx = as.data.frame(mx)
ggplot(mx, aes(carat)) +
geom_histogram()
head(mx)
ggplot(mx, aes(mx)) +
geom_histogram()
ggsave('means.png')
# SMILATION 1
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
mx = c(mx, sum(x1) - sum(x2))
}
hist(mx)
max(mx)
mx = as.data.frame(mx)
ggplot(mx, aes(mx)) +
geom_histogram()
ggsave('total_sum.png')
# SMILATION 1
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
mx = c(mx, sum(x1) - sum(x2))
}
hist(mx)
max(mx)
mx = as.data.frame(mx)
ggplot(mx, aes(mx)) +
geom_histogram()
ggsave('total_sum.png') + xlab('Differences: total sum')
ggplot(mx, aes(mx)) +
geom_histogram() + xlab('Differences: total sum')
ggsave('total_sum.png')
length(mx[mx <40000])/length(mx)
# SMILATION 1
# simulation for the z-test
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
xx1 = x1 #(x1 -mean(x1))/sd(x1)
xx2 = x2 #(x2 -mean(x2))/sd(x2)
mx = c(mx, mean(xx1) - mean(xx2))
}
hist(mx)
length(mx[mx <40000])/length(mx)
max(mx)
60000/800000
mx = as.data.frame(mx)
ggplot(mx, aes(mx)) +
geom_histogram() + xlab('Differences: mean')
ggsave('means.png')
N = 5000
mx = NULL
for (i in 1:N){
x1 <- rnorm(50, mean = 800000, sd = 100000)
x2 <- rnorm(50, mean = 780000, sd = 30000)
mx = c(mx, sum(x1) - sum(x2))
}
hist(mx)
max(mx)
mx = as.data.frame(mx)
ggplot(mx, aes(mx)) +
geom_histogram() + xlab('Differences: total sum')
ggsave('total_sum.png')
20000*50
